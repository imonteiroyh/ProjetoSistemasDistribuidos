# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import air_conditioner_pb2 as proto_dot_air__conditioner__pb2


class AirConditionerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.change_temperature = channel.unary_unary(
                '/AirConditioner/change_temperature',
                request_serializer=proto_dot_air__conditioner__pb2.ChangeAirConditionerTemperatureRequest.SerializeToString,
                response_deserializer=proto_dot_air__conditioner__pb2.AirConditionerResponse.FromString,
                )
        self.get_temperature = channel.unary_unary(
                '/AirConditioner/get_temperature',
                request_serializer=proto_dot_air__conditioner__pb2.AirConditionerEmptyRequest.SerializeToString,
                response_deserializer=proto_dot_air__conditioner__pb2.AirConditionerResponse.FromString,
                )
        self.change_state = channel.unary_unary(
                '/AirConditioner/change_state',
                request_serializer=proto_dot_air__conditioner__pb2.ChangeAirConditionerStateRequest.SerializeToString,
                response_deserializer=proto_dot_air__conditioner__pb2.AirConditionerResponse.FromString,
                )
        self.get_state = channel.unary_unary(
                '/AirConditioner/get_state',
                request_serializer=proto_dot_air__conditioner__pb2.AirConditionerEmptyRequest.SerializeToString,
                response_deserializer=proto_dot_air__conditioner__pb2.AirConditionerResponse.FromString,
                )
        self.change_sensor_state = channel.unary_unary(
                '/AirConditioner/change_sensor_state',
                request_serializer=proto_dot_air__conditioner__pb2.ChangeTemperatureSensorState.SerializeToString,
                response_deserializer=proto_dot_air__conditioner__pb2.AirConditionerResponse.FromString,
                )


class AirConditionerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def change_temperature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_temperature(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def change_state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def change_sensor_state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AirConditionerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'change_temperature': grpc.unary_unary_rpc_method_handler(
                    servicer.change_temperature,
                    request_deserializer=proto_dot_air__conditioner__pb2.ChangeAirConditionerTemperatureRequest.FromString,
                    response_serializer=proto_dot_air__conditioner__pb2.AirConditionerResponse.SerializeToString,
            ),
            'get_temperature': grpc.unary_unary_rpc_method_handler(
                    servicer.get_temperature,
                    request_deserializer=proto_dot_air__conditioner__pb2.AirConditionerEmptyRequest.FromString,
                    response_serializer=proto_dot_air__conditioner__pb2.AirConditionerResponse.SerializeToString,
            ),
            'change_state': grpc.unary_unary_rpc_method_handler(
                    servicer.change_state,
                    request_deserializer=proto_dot_air__conditioner__pb2.ChangeAirConditionerStateRequest.FromString,
                    response_serializer=proto_dot_air__conditioner__pb2.AirConditionerResponse.SerializeToString,
            ),
            'get_state': grpc.unary_unary_rpc_method_handler(
                    servicer.get_state,
                    request_deserializer=proto_dot_air__conditioner__pb2.AirConditionerEmptyRequest.FromString,
                    response_serializer=proto_dot_air__conditioner__pb2.AirConditionerResponse.SerializeToString,
            ),
            'change_sensor_state': grpc.unary_unary_rpc_method_handler(
                    servicer.change_sensor_state,
                    request_deserializer=proto_dot_air__conditioner__pb2.ChangeTemperatureSensorState.FromString,
                    response_serializer=proto_dot_air__conditioner__pb2.AirConditionerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AirConditioner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AirConditioner(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def change_temperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AirConditioner/change_temperature',
            proto_dot_air__conditioner__pb2.ChangeAirConditionerTemperatureRequest.SerializeToString,
            proto_dot_air__conditioner__pb2.AirConditionerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_temperature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AirConditioner/get_temperature',
            proto_dot_air__conditioner__pb2.AirConditionerEmptyRequest.SerializeToString,
            proto_dot_air__conditioner__pb2.AirConditionerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def change_state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AirConditioner/change_state',
            proto_dot_air__conditioner__pb2.ChangeAirConditionerStateRequest.SerializeToString,
            proto_dot_air__conditioner__pb2.AirConditionerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AirConditioner/get_state',
            proto_dot_air__conditioner__pb2.AirConditionerEmptyRequest.SerializeToString,
            proto_dot_air__conditioner__pb2.AirConditionerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def change_sensor_state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AirConditioner/change_sensor_state',
            proto_dot_air__conditioner__pb2.ChangeTemperatureSensorState.SerializeToString,
            proto_dot_air__conditioner__pb2.AirConditionerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
